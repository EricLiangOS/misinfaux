{"ast":null,"code":"var _jsxFileName = \"/Users/ehliang/Desktop/Projects/misinfaux/misinfaux/frontend/src/components/TextDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextDisplay = ({\n  text,\n  problematicElements\n}) => {\n  _s();\n  const [highlightedText, setHighlightedText] = useState('');\n  const [annotations, setAnnotations] = useState([]);\n  useEffect(() => {\n    if (!text || !problematicElements) return;\n    const allProblematicWords = [...problematicElements.overusedWords, ...problematicElements.suspiciousWords];\n\n    // Create a map of problematic words to annotations\n    const wordAnnotations = {};\n    problematicElements.overusedWords.forEach(word => {\n      wordAnnotations[word] = `\"${word}\" is repeated excessively, which is a common tactic in misleading content.`;\n    });\n    problematicElements.suspiciousWords.forEach(word => {\n      wordAnnotations[word] = `\"${word}\" is a loaded term often used in misleading articles to evoke emotional responses.`;\n    });\n\n    // Process text to add highlight spans\n    let processedText = text;\n    let currentAnnotations = [];\n    let annotationId = 0;\n    allProblematicWords.forEach(word => {\n      const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\n      let match;\n      while ((match = regex.exec(text)) !== null) {\n        const id = `annotation-${annotationId++}`;\n        const start = match.index;\n        const end = start + word.length;\n        currentAnnotations.push({\n          id,\n          word,\n          position: start,\n          text: wordAnnotations[word.toLowerCase()]\n        });\n      }\n    });\n\n    // Sort annotations by position\n    currentAnnotations.sort((a, b) => a.position - b.position);\n\n    // Create HTML with highlighted spans\n    let currentPosition = 0;\n    let result = '';\n    currentAnnotations.forEach(annotation => {\n      const {\n        id,\n        word,\n        position\n      } = annotation;\n\n      // Add text before the current word\n      if (position > currentPosition) {\n        result += text.substring(currentPosition, position);\n      }\n\n      // Add the highlighted word\n      result += `<span class=\"highlighted-text\" id=\"${id}\">${text.substring(position, position + word.length)}</span>`;\n\n      // Update current position\n      currentPosition = position + word.length;\n    });\n\n    // Add any remaining text\n    if (currentPosition < text.length) {\n      result += text.substring(currentPosition);\n    }\n    setHighlightedText(result);\n    setAnnotations(currentAnnotations);\n  }, [text, problematicElements]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-analysis-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"original-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Article Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-content\",\n        dangerouslySetInnerHTML: {\n          __html: highlightedText\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"annotations-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Content Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), annotations.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"annotations-list\",\n        children: annotations.map(annotation => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"annotation-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"annotation-word\",\n            children: [\"\\\"\", annotation.word, \"\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"annotation-text\",\n            children: annotation.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 33\n          }, this)]\n        }, annotation.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No problematic elements detected in the text.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(TextDisplay, \"wA1NyIbUQdV2NVfohCAWl+nuFtw=\");\n_c = TextDisplay;\nexport default TextDisplay;\nvar _c;\n$RefreshReg$(_c, \"TextDisplay\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TextDisplay","text","problematicElements","_s","highlightedText","setHighlightedText","annotations","setAnnotations","allProblematicWords","overusedWords","suspiciousWords","wordAnnotations","forEach","word","processedText","currentAnnotations","annotationId","regex","RegExp","match","exec","id","start","index","end","length","push","position","toLowerCase","sort","a","b","currentPosition","result","annotation","substring","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","map","_c","$RefreshReg$"],"sources":["/Users/ehliang/Desktop/Projects/misinfaux/misinfaux/frontend/src/components/TextDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TextDisplay = ({ text, problematicElements }) => {\n    const [highlightedText, setHighlightedText] = useState('');\n    const [annotations, setAnnotations] = useState([]);\n    \n    useEffect(() => {\n        if (!text || !problematicElements) return;\n        \n        const allProblematicWords = [\n            ...problematicElements.overusedWords,\n            ...problematicElements.suspiciousWords\n        ];\n        \n        // Create a map of problematic words to annotations\n        const wordAnnotations = {};\n        problematicElements.overusedWords.forEach(word => {\n            wordAnnotations[word] = `\"${word}\" is repeated excessively, which is a common tactic in misleading content.`;\n        });\n        \n        problematicElements.suspiciousWords.forEach(word => {\n            wordAnnotations[word] = `\"${word}\" is a loaded term often used in misleading articles to evoke emotional responses.`;\n        });\n        \n        // Process text to add highlight spans\n        let processedText = text;\n        let currentAnnotations = [];\n        let annotationId = 0;\n        \n        allProblematicWords.forEach(word => {\n            const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\n            let match;\n            \n            while ((match = regex.exec(text)) !== null) {\n                const id = `annotation-${annotationId++}`;\n                const start = match.index;\n                const end = start + word.length;\n                \n                currentAnnotations.push({\n                    id,\n                    word,\n                    position: start,\n                    text: wordAnnotations[word.toLowerCase()]\n                });\n            }\n        });\n        \n        // Sort annotations by position\n        currentAnnotations.sort((a, b) => a.position - b.position);\n        \n        // Create HTML with highlighted spans\n        let currentPosition = 0;\n        let result = '';\n        \n        currentAnnotations.forEach(annotation => {\n            const { id, word, position } = annotation;\n            \n            // Add text before the current word\n            if (position > currentPosition) {\n                result += text.substring(currentPosition, position);\n            }\n            \n            // Add the highlighted word\n            result += `<span class=\"highlighted-text\" id=\"${id}\">${text.substring(position, position + word.length)}</span>`;\n            \n            // Update current position\n            currentPosition = position + word.length;\n        });\n        \n        // Add any remaining text\n        if (currentPosition < text.length) {\n            result += text.substring(currentPosition);\n        }\n        \n        setHighlightedText(result);\n        setAnnotations(currentAnnotations);\n        \n    }, [text, problematicElements]);\n    \n    return (\n        <div className=\"text-analysis-container\">\n            <div className=\"original-text\">\n                <h3>Article Content</h3>\n                <div \n                    className=\"text-content\" \n                    dangerouslySetInnerHTML={{ __html: highlightedText }}\n                />\n            </div>\n            \n            <div className=\"annotations-panel\">\n                <h3>Content Analysis</h3>\n                {annotations.length > 0 ? (\n                    <ul className=\"annotations-list\">\n                        {annotations.map(annotation => (\n                            <li key={annotation.id} className=\"annotation-item\">\n                                <span className=\"annotation-word\">\"{annotation.word}\"</span>\n                                <p className=\"annotation-text\">{annotation.text}</p>\n                            </li>\n                        ))}\n                    </ul>\n                ) : (\n                    <p>No problematic elements detected in the text.</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TextDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}